"use strict";
let endDate = new Date("Mar 15, 2024 12:00:00");
let timer = setInterval(() => {
    const now = new Date().getTime();
    const timeLeft = Number(endDate) /*endDate.getTime()*/ - now;
    if (timeLeft >= 0) {
        let days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        let hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        let mins = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        let secs = Math.floor((timeLeft % (1000 * 60)) / 1000);
        const timerDays = document.getElementById('timer-days');
        const timerHours = document.getElementById('timer-hours');
        const timerMins = document.getElementById('timer-mins');
        const timerSecs = document.getElementById('timer-secs');
        if (timerDays != null) {
            timerDays.innerHTML = days + "<span class='label'>DAY(S)</span>";
        }
        if (timerHours != null) {
            timerHours.innerHTML = ("0" + hours).slice(-2) + "<span class='label'>HR(S)</span>";
        }
        if (timerMins != null) {
            timerMins.innerHTML = ("0" + mins).slice(-2) + "<span class='label'>MIN(S)</span>";
        }
        if (timerSecs != null) {
            timerSecs.innerHTML = ("0" + secs).slice(-2) + "<span class='label'>SEC(S)</span>";
        }
    }
    else {
        const timerOver = document.getElementById('timer');
        if (timerOver != null) {
            timerOver.innerHTML = "The countdown is over!";
        }
    }
}, 1000);
function clicked() {
    alert(endDate);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUksT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDaEQsSUFBSSxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRTtJQUV6QixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxxQkFBcUIsR0FBRyxHQUFHLENBQUM7SUFFN0QsSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO1FBRWYsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuRSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFFdkQsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQTBCLENBQUM7UUFDakYsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQTBCLENBQUM7UUFDbkYsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQTBCLENBQUM7UUFDakYsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQTBCLENBQUM7UUFFakYsSUFBSSxTQUFTLElBQUcsSUFBSSxFQUFFO1lBQ2xCLFNBQVMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxHQUFHLG1DQUFtQyxDQUFDO1NBQ3BFO1FBRUQsSUFBSyxVQUFVLElBQUksSUFBSSxFQUFHO1lBQ3RCLFVBQVUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxHQUFHLEdBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsa0NBQWtDLENBQUM7U0FDckY7UUFFRCxJQUFJLFNBQVMsSUFBSSxJQUFJLEVBQUU7WUFDbkIsU0FBUyxDQUFDLFNBQVMsR0FBRyxDQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxtQ0FBbUMsQ0FBQztTQUNwRjtRQUVELElBQUksU0FBUyxJQUFJLElBQUksRUFBRTtZQUNuQixTQUFTLENBQUMsU0FBUyxHQUFHLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLG1DQUFtQyxDQUFDO1NBQ3BGO0tBRUo7U0FBTTtRQUVILE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUEwQixDQUFDO1FBRTVFLElBQUksU0FBUyxJQUFJLElBQUksRUFBRTtZQUNuQixTQUFTLENBQUMsU0FBUyxHQUFHLHdCQUF3QixDQUFDO1NBQ2xEO0tBRUo7QUFDTCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFVCxTQUFTLE9BQU87SUFDWixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImxldCBlbmREYXRlID0gbmV3IERhdGUoXCJNYXIgMTUsIDIwMjQgMTI6MDA6MDBcIik7XHJcbmxldCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcclxuXHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IHRpbWVMZWZ0ID0gTnVtYmVyKGVuZERhdGUpIC8qZW5kRGF0ZS5nZXRUaW1lKCkqLyAtIG5vdztcclxuICAgIFxyXG4gICAgaWYgKHRpbWVMZWZ0ID49IDApIHtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgZGF5cyA9IE1hdGguZmxvb3IodGltZUxlZnQgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xyXG4gICAgICAgIGxldCBob3VycyA9IE1hdGguZmxvb3IoKHRpbWVMZWZ0ICUgKDEwMDAgKiA2MCAqIDYwICogMjQpKSAvICgxMDAwICogNjAgKiA2MCkpO1xyXG4gICAgICAgIGxldCBtaW5zID0gTWF0aC5mbG9vcigodGltZUxlZnQgJSAoMTAwMCAqIDYwICogNjApKSAvICgxMDAwICogNjApKTtcclxuICAgICAgICBsZXQgc2VjcyA9IE1hdGguZmxvb3IoKHRpbWVMZWZ0ICUgKDEwMDAgKiA2MCkpIC8gMTAwMCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgdGltZXJEYXlzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpbWVyLWRheXMnKSBhcyBIVE1MRGl2RWxlbWVudCB8IG51bGw7XHJcbiAgICAgICAgY29uc3QgdGltZXJIb3VycyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1lci1ob3VycycpIGFzIEhUTUxEaXZFbGVtZW50IHwgbnVsbDtcclxuICAgICAgICBjb25zdCB0aW1lck1pbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGltZXItbWlucycpIGFzIEhUTUxEaXZFbGVtZW50IHwgbnVsbDtcclxuICAgICAgICBjb25zdCB0aW1lclNlY3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGltZXItc2VjcycpIGFzIEhUTUxEaXZFbGVtZW50IHwgbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICBpZiAodGltZXJEYXlzIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aW1lckRheXMuaW5uZXJIVE1MID0gZGF5cyArIFwiPHNwYW4gY2xhc3M9J2xhYmVsJz5EQVkoUyk8L3NwYW4+XCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIHRpbWVySG91cnMgIT0gbnVsbCApIHtcclxuICAgICAgICAgICAgdGltZXJIb3Vycy5pbm5lckhUTUwgPSAoXCIwXCIraG91cnMpLnNsaWNlKC0yKSArIFwiPHNwYW4gY2xhc3M9J2xhYmVsJz5IUihTKTwvc3Bhbj5cIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aW1lck1pbnMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aW1lck1pbnMuaW5uZXJIVE1MID0gKFwiMFwiK21pbnMpLnNsaWNlKC0yKSArIFwiPHNwYW4gY2xhc3M9J2xhYmVsJz5NSU4oUyk8L3NwYW4+XCI7IFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRpbWVyU2VjcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRpbWVyU2Vjcy5pbm5lckhUTUwgPSAoXCIwXCIrc2Vjcykuc2xpY2UoLTIpICsgXCI8c3BhbiBjbGFzcz0nbGFiZWwnPlNFQyhTKTwvc3Bhbj5cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHRpbWVyT3ZlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1lcicpIGFzIEhUTUxEaXZFbGVtZW50IHwgbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICBpZiAodGltZXJPdmVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGltZXJPdmVyLmlubmVySFRNTCA9IFwiVGhlIGNvdW50ZG93biBpcyBvdmVyIVwiO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgfVxyXG59LCAxMDAwKTtcclxuXHJcbmZ1bmN0aW9uIGNsaWNrZWQoKSB7XHJcbiAgICBhbGVydChlbmREYXRlKTtcclxufVxyXG5cclxuIl19