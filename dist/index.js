"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Book_1 = require("./entities/Book");
const Notepad_1 = require("./entities/Notepad");
const MyMap_1 = require("./common/MyMap");
const showData = (entity) => {
    if (entity instanceof Book_1.Book) {
        console.log(`Книга - ${entity.title} - ${entity.author} - ${getPrice(entity)}`);
    }
    else if (entity instanceof Notepad_1.Notepad) {
        console.log(`Блокнот - ${getPrice(entity)}`);
    }
};
const getPrice = (entity) => {
    return entity.price ? entity.price.toString() : "не продается";
};
const getFrom = (obj, title) => {
    return obj[title];
};
const main = () => {
    const map = new MyMap_1.MyMap();
    console.log(1, map.getAll());
    map.set("title 1", new Book_1.Book("title 1", "author 1", "fantasy", 5));
    console.log(2, map.getAll());
    map.set("title 2", new Notepad_1.Notepad("title 2"));
    console.log(3, map.getAll());
    map.remove("title 2");
    console.log(4, map.getAll());
    map.set("title 2", new Notepad_1.Notepad("title 2"));
    console.log(5, map.getAll());
    map.clear();
    console.log(5, map.getAll());
    // const books = {
    //   "title 1": new Book("title 1", "author 1", "fantasy", 5),
    //   "title 2": new Book("title 2", "author 2", "other"),
    // };
    // const notepads = {
    //   "title 1": new Notepad("title 1", 5),
    //   "title 2": new Notepad("title 2"),
    // };
    // console.log(getFrom<Book>(books, "title 1"));
    // console.log(getFrom<Notepad>(notepads, "title 3"));
};
main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwQ0FBdUM7QUFDdkMsZ0RBQTZDO0FBRTdDLDBDQUF1QztBQUV2QyxNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQWUsRUFBUSxFQUFFO0lBQ3pDLElBQUksTUFBTSxZQUFZLFdBQUksRUFBRTtRQUMxQixPQUFPLENBQUMsR0FBRyxDQUNULFdBQVcsTUFBTSxDQUFDLEtBQUssTUFBTSxNQUFNLENBQUMsTUFBTSxNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUNuRSxDQUFDO0tBQ0g7U0FBTSxJQUFJLE1BQU0sWUFBWSxpQkFBTyxFQUFFO1FBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzlDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFzQixFQUFVLEVBQUU7SUFDbEQsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUM7QUFDakUsQ0FBQyxDQUFDO0FBRUYsTUFBTSxPQUFPLEdBQUcsQ0FDZCxHQUFzQixFQUN0QixLQUFhLEVBQ0UsRUFBRTtJQUNqQixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQixDQUFDLENBQUM7QUFFRixNQUFNLElBQUksR0FBRyxHQUFHLEVBQUU7SUFDaEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFLLEVBQW1CLENBQUM7SUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFFN0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxXQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUU3QixHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxJQUFJLGlCQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUU3QixHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBRTdCLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksaUJBQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBRTdCLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBRTdCLGtCQUFrQjtJQUNsQiw4REFBOEQ7SUFDOUQseURBQXlEO0lBQ3pELEtBQUs7SUFFTCxxQkFBcUI7SUFDckIsMENBQTBDO0lBQzFDLHVDQUF1QztJQUN2QyxLQUFLO0lBRUwsZ0RBQWdEO0lBQ2hELHNEQUFzRDtBQUN4RCxDQUFDLENBQUM7QUFFRixJQUFJLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvb2sgfSBmcm9tIFwiLi9lbnRpdGllcy9Cb29rXCI7XG5pbXBvcnQgeyBOb3RlcGFkIH0gZnJvbSBcIi4vZW50aXRpZXMvTm90ZXBhZFwiO1xuaW1wb3J0IHsgUHJvZHVjdCB9IGZyb20gXCIuL2VudGl0aWVzL1Byb2R1Y3RcIjtcbmltcG9ydCB7IE15TWFwIH0gZnJvbSBcIi4vY29tbW9uL015TWFwXCI7XG5cbmNvbnN0IHNob3dEYXRhID0gKGVudGl0eTogdW5rbm93bik6IHZvaWQgPT4ge1xuICBpZiAoZW50aXR5IGluc3RhbmNlb2YgQm9vaykge1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYNCa0L3QuNCz0LAgLSAke2VudGl0eS50aXRsZX0gLSAke2VudGl0eS5hdXRob3J9IC0gJHtnZXRQcmljZShlbnRpdHkpfWBcbiAgICApO1xuICB9IGVsc2UgaWYgKGVudGl0eSBpbnN0YW5jZW9mIE5vdGVwYWQpIHtcbiAgICBjb25zb2xlLmxvZyhg0JHQu9C+0LrQvdC+0YIgLSAke2dldFByaWNlKGVudGl0eSl9YCk7XG4gIH1cbn07XG5cbmNvbnN0IGdldFByaWNlID0gKGVudGl0eTogQm9vayB8IE5vdGVwYWQpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gZW50aXR5LnByaWNlID8gZW50aXR5LnByaWNlLnRvU3RyaW5nKCkgOiBcItC90LUg0L/RgNC+0LTQsNC10YLRgdGPXCI7XG59O1xuXG5jb25zdCBnZXRGcm9tID0gPFQgZXh0ZW5kcyBQcm9kdWN0PGFueT4+KFxuICBvYmo6IFJlY29yZDxzdHJpbmcsIFQ+LFxuICB0aXRsZTogc3RyaW5nXG4pOiBUIHwgdW5kZWZpbmVkID0+IHtcbiAgcmV0dXJuIG9ialt0aXRsZV07XG59O1xuXG5jb25zdCBtYWluID0gKCkgPT4ge1xuICBjb25zdCBtYXAgPSBuZXcgTXlNYXA8c3RyaW5nLCBQcm9kdWN0PigpO1xuICBjb25zb2xlLmxvZygxLCBtYXAuZ2V0QWxsKCkpO1xuXG4gIG1hcC5zZXQoXCJ0aXRsZSAxXCIsIG5ldyBCb29rKFwidGl0bGUgMVwiLCBcImF1dGhvciAxXCIsIFwiZmFudGFzeVwiLCA1KSk7XG4gIGNvbnNvbGUubG9nKDIsIG1hcC5nZXRBbGwoKSk7XG5cbiAgbWFwLnNldChcInRpdGxlIDJcIiwgbmV3IE5vdGVwYWQoXCJ0aXRsZSAyXCIpKTtcbiAgY29uc29sZS5sb2coMywgbWFwLmdldEFsbCgpKTtcblxuICBtYXAucmVtb3ZlKFwidGl0bGUgMlwiKTtcbiAgY29uc29sZS5sb2coNCwgbWFwLmdldEFsbCgpKTtcblxuICBtYXAuc2V0KFwidGl0bGUgMlwiLCBuZXcgTm90ZXBhZChcInRpdGxlIDJcIikpO1xuICBjb25zb2xlLmxvZyg1LCBtYXAuZ2V0QWxsKCkpO1xuXG4gIG1hcC5jbGVhcigpO1xuICBjb25zb2xlLmxvZyg1LCBtYXAuZ2V0QWxsKCkpO1xuXG4gIC8vIGNvbnN0IGJvb2tzID0ge1xuICAvLyAgIFwidGl0bGUgMVwiOiBuZXcgQm9vayhcInRpdGxlIDFcIiwgXCJhdXRob3IgMVwiLCBcImZhbnRhc3lcIiwgNSksXG4gIC8vICAgXCJ0aXRsZSAyXCI6IG5ldyBCb29rKFwidGl0bGUgMlwiLCBcImF1dGhvciAyXCIsIFwib3RoZXJcIiksXG4gIC8vIH07XG5cbiAgLy8gY29uc3Qgbm90ZXBhZHMgPSB7XG4gIC8vICAgXCJ0aXRsZSAxXCI6IG5ldyBOb3RlcGFkKFwidGl0bGUgMVwiLCA1KSxcbiAgLy8gICBcInRpdGxlIDJcIjogbmV3IE5vdGVwYWQoXCJ0aXRsZSAyXCIpLFxuICAvLyB9O1xuXG4gIC8vIGNvbnNvbGUubG9nKGdldEZyb208Qm9vaz4oYm9va3MsIFwidGl0bGUgMVwiKSk7XG4gIC8vIGNvbnNvbGUubG9nKGdldEZyb208Tm90ZXBhZD4obm90ZXBhZHMsIFwidGl0bGUgM1wiKSk7XG59O1xuXG5tYWluKCk7XG5cbiJdfQ==